datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

model Transaction {
    id            String          @id @default(cuid())
    amount        Int
    payee         String
    notes         String?
    date          DateTime
    type          TransactionType @default(CASH)
    user          User            @relation(fields: [userId], references: [id])
    userId        String
    bankAccount   BankAccount     @relation(fields: [bankAccountId], references: [id], onDelete: Cascade)
    bankAccountId String
    category      Category?       @relation(fields: [categoryId], references: [id], onDelete: SetNull)
    categoryId    String?
}

enum TransactionType {
    CASH
    CARD
    UPI
}

model Category {
    id          String        @id @default(cuid())
    name        String
    user        User          @relation(fields: [userId], references: [id])
    userId      String
    Transaction Transaction[]
}

model BankAccount {
    id            String          @id @default(cuid())
    accountName   String
    accountType   BankAccountType @default(DEBIT)
    accountNumber String?         @unique
    bankName      String
    isPrimary     Boolean         @default(false)
    user          User            @relation(fields: [userId], references: [id])
    userId        String
    Transaction   Transaction[]
}

enum BankAccountType {
    DEBIT
    CREDIT
}

enum Period {
    WEEK
    MONTH
    YEAR
}

model User {
    id            String          @id @default(cuid())
    name          String?
    email         String          @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    locale        String          @default("IN")
    period        Period          @default(MONTH)
    // Optional for WebAuthn support
    Authenticator Authenticator[]

    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    Transaction Transaction[]
    BankAccount BankAccount[]
    Category    Category[]
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}
